<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="clr-namespace:OutWit.Common.Controls.Selectors"
                    xmlns:d="clr-namespace:OutWit.Common.Controls.DropDown"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:o="clr-namespace:OutWit.Common.Controls.Output"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/OutWit.Common.Controls;component/Resources.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="i:DropDownComboSelector">
       <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HeaderScale" Value="1.0"/>
       <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="i:DropDownComboSelector">
                    <Grid IsSharedSizeScope="True" Background="Transparent">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition x:Name="MediumColumn" Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <md:PackIcon x:Name="Icon"  Grid.Row="0" Grid.Column="0" Kind="{TemplateBinding ImageKind}" Foreground="{DynamicResource MaterialDesignTextBoxBorder}"
                                     Height="{TemplateBinding ImageSize}" Width="{TemplateBinding ImageSize}" IsEnabled="{TemplateBinding IsEnabled}"
                                     Visibility="{TemplateBinding ShowImage, Converter={StaticResource BooleanToVisibility}}" Focusable="False"/>

                        <md:SmartHint x:Name="Hint" Focusable="False" IsHitTestVisible="False" Grid.Column="1" Grid.Row="0" Margin="1, 6, 0, 0"
                                      Padding="{TemplateBinding Padding}" FontSize="{TemplateBinding HintFontSize}"
                                      HintOpacity="{Binding Path=(md:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                      UseFloating="{Binding Path=(md:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                      FloatingOffset="{Binding Path=(md:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}">
                            <md:SmartHint.Hint>
                                <Border x:Name="HintBackgroundBorder" Background="Transparent" CornerRadius="2">
                                    <ContentPresenter 
                                        x:Name="HintWrapper" Content="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                            </md:SmartHint.Hint>
                        </md:SmartHint>

                        <md:PopupBox x:Name="Popup" Grid.Row="2" Grid.Column="1" PlacementMode="BottomAndAlignCentres" Background="Transparent"
                                     ToggleContent="{TemplateBinding SelectedItem}" ToggleContentTemplate="{TemplateBinding ItemTemplate}"
                                     Padding="0" Margin="0" StaysOpen="True"  ClipToBounds="True" Width="{TemplateBinding ActualWidth}"
                                     IsPopupOpen = "{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                    <b:InvokeCommandAction Command="{Binding Path=CheckPopupCmd, RelativeSource={RelativeSource AncestorType={x:Type i:DropDownComboSelector}}}"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>

                            <ListBox ItemsSource="{TemplateBinding ItemsSource}" SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                     ItemTemplate="{TemplateBinding ItemTemplate}" Width="{TemplateBinding ActualWidth}" SelectionMode="Single">

                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="ListBoxItem" BasedOn="{StaticResource MaterialDesignListBoxItem}">
                                        <Setter Property="Margin" Value="0"/>
                                        <Setter Property="Padding" Value="5"/>
                                    </Style>
                                </ListBox.ItemContainerStyle>

                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical"/>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                            </ListBox>
                        </md:PopupBox>

                        <ContentControl x:Name="Content" Grid.Row="2" Grid.Column="1" Margin="0 0 0 5"
                                        ContentTemplate="{TemplateBinding ItemTemplate}" Content="{TemplateBinding SelectedItem}"/>

                        <Grid Grid.Row="2" Grid.Column="1" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <md:PackIcon x:Name="DropDownIcon" Grid.Row="1" Grid.Column="1" Height="24" Width="24" Kind="MenuDown">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                        <b:InvokeCommandAction Command="{Binding Path=CheckPopupCmd, RelativeSource={RelativeSource AncestorType={x:Type i:DropDownComboSelector}}}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </md:PackIcon>
                        </Grid>

                        <Border x:Name="BottomBorder" Grid.Row="2" Grid.Column="1" BorderThickness="0 0 0 1"
                                BorderBrush="{TemplateBinding Foreground}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="DropDownIcon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Popup"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="Content"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="Popup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Content"/>
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Hint"/>
                        </Trigger>

                        <Trigger Property="ShowImage" Value="False">
                            <Setter Property="Margin" Value="1 0 0 0" TargetName="Hint"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}" TargetName="Icon"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}" TargetName="DropDownIcon"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" TargetName="BottomBorder"/>
                            <Setter Property="BorderThickness" Value="0 0 0 2" TargetName="BottomBorder"/>
                        </Trigger>

                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter Property="Kind" Value="MenuUp" TargetName="DropDownIcon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>