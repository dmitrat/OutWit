<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:p="clr-namespace:OutWit.Common.Controls.Popup"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:s="clr-namespace:OutWit.Common.Controls.Special"
                    xmlns:buttons="clr-namespace:OutWit.Common.Controls.Buttons">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/OutWit.Common.Controls;component/Resources.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="p:PopupButton">
        <Style.Resources>
            <md:BrushRoundConverter x:Key="BrushRoundConverter"/>
        </Style.Resources>

        <Setter Property="IconHeight" Value="16"/>
        <Setter Property="IconWidth" Value="16"/>
        <Setter Property="Padding" Value="4, 2, 4, 2"/>
        <Setter Property="Margin" Value="0, 0, 0, 0"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="OverlayBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="p:PopupButton">
                    <Grid>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Name="ButtonHeader" Grid.Column="0" Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
                        <md:PopupBox x:Name="PopupBox"  Grid.Column="1" Focusable="False" Margin="0" Padding="0" PopupHorizontalOffset="2.5" PopupVerticalOffset="-2.5" StaysOpen="True"
                                     md:RippleAssist.Feedback="{TemplateBinding OverlayBrush, Converter={StaticResource BrushRoundConverter}}">

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Opened">
                                    <b:InvokeCommandAction Command="{Binding Path=RefreshPopupBindingCommand, RelativeSource={RelativeSource AncestorType={x:Type p:PopupButton}}}" 
                                                           CommandParameter="{Binding ElementName=PopupGrid}"/>
                                </b:EventTrigger>

                                <b:EventTrigger EventName="PreviewMouseDown">
                                    <b:InvokeCommandAction Command="{Binding Path=MouseClickCommand, RelativeSource={RelativeSource AncestorType={x:Type p:PopupButton}}}" 
                                                           PassEventArgsToCommand="True"/>
                                </b:EventTrigger>

                                <b:EventTrigger EventName="PreviewMouseUp">
                                    <b:InvokeCommandAction Command="{Binding Path=MouseClickCommand, RelativeSource={RelativeSource AncestorType={x:Type p:PopupButton}}}" 
                                                           PassEventArgsToCommand="True"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>

                            <md:PopupBox.ToggleContent>
                                <s:IconBox x:Name="Icon" Kind="{TemplateBinding IconKind}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" 
                                           OverlayBrush="{TemplateBinding OverlayBrush}" Foreground="{TemplateBinding Foreground}"
                                           IconHeight="{TemplateBinding IconHeight}" IconWidth="{TemplateBinding IconWidth}" 
                                           VerticalAlignment="Center" HorizontalAlignment="Center" ToolTip="{TemplateBinding ToolTip}">
                                    <s:IconBox.RenderTransform>
                                        <TranslateTransform X="-1" Y="0"/>
                                    </s:IconBox.RenderTransform>
                                </s:IconBox>
                            </md:PopupBox.ToggleContent>

                            <Grid x:Name="PopupGrid">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="15"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" Text="{TemplateBinding Title}" FontSize="16" FontWeight="Bold" Margin="5, 10, 0, 10"/>

                                <buttons:FlatButton Grid.Row="0" Grid.Column="3" OverlayBrush="{TemplateBinding OverlayBrush}" HorizontalAlignment="Center" Padding="10, 0, 10, 0"
                                                     Kind="Close" Command="{x:Static md:PopupBox.ClosePopupCommand}"/>

                                <ContentPresenter Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="5, 10, 5, 0"/>
                            </Grid>
                        </md:PopupBox >
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Header" Value="Null">
                            <Setter TargetName="ButtonHeader" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                        <Trigger Property="IsPassive" Value="True">
                            <Setter Property="Foreground" Value="{Binding PassiveBrush, RelativeSource={RelativeSource TemplatedParent}}" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{Binding ActiveBrush, RelativeSource={RelativeSource TemplatedParent}}" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding ActiveBrush, RelativeSource={RelativeSource TemplatedParent}}" TargetName="Icon"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>